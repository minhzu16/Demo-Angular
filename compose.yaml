services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: tiki-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-mvp_ecommerce}
      MYSQL_USER: ${MYSQL_USER:-sa}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-123}
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./infra/mysql/init:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - tiki_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tiki-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - tiki_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Backend Gateway
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tiki-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=${MYSQL_USER:-sa}
      - DB_PASSWORD=${MYSQL_PASSWORD:-123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tiki_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Auth Service
  auth:
    build:
      context: ./backend
      dockerfile: auth/Dockerfile
    container_name: tiki-auth
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=${MYSQL_USER:-sa}
      - DB_PASSWORD=${MYSQL_PASSWORD:-123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tiki_net
    restart: unless-stopped

  # Product Service
  product:
    build:
      context: ./backend
      dockerfile: product/Dockerfile
    container_name: tiki-product
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=${MYSQL_USER:-sa}
      - DB_PASSWORD=${MYSQL_PASSWORD:-123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tiki_net
    restart: unless-stopped

  # Order Service
  order:
    build:
      context: ./backend
      dockerfile: order/Dockerfile
    container_name: tiki-order
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=${MYSQL_USER:-sa}
      - DB_PASSWORD=${MYSQL_PASSWORD:-123}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - tiki_net
    restart: unless-stopped

  # Cart Service
  cart:
    build:
      context: ./backend
      dockerfile: cart/Dockerfile
    container_name: tiki-cart
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=${MYSQL_USER:-sa}
      - DB_PASSWORD=${MYSQL_PASSWORD:-123}
      - PRODUCT_SERVICE_URL=http://product:8081
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - tiki_net
    restart: unless-stopped

  # Payment Service
  payment:
    build:
      context: ./backend
      dockerfile: payment/Dockerfile
    container_name: tiki-payment
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=${MYSQL_USER:-sa}
      - DB_PASSWORD=${MYSQL_PASSWORD:-123}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - tiki_net
    restart: unless-stopped

  # Warehouse Service
  warehouse:
    build:
      context: ./backend
      dockerfile: warehouse/Dockerfile
    container_name: tiki-warehouse
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=${MYSQL_USER:-sa}
      - DB_PASSWORD=${MYSQL_PASSWORD:-123}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - tiki_net
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tiki-frontend
    ports:
      - "4200:80"
    depends_on:
      - backend
      - product
      - auth
      - order
    networks:
      - tiki_net
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:

networks:
  tiki_net:
    driver: bridge